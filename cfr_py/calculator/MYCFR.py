# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MYCFR')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MYCFR')
    _MYCFR = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MYCFR', [dirname(__file__)])
        except ImportError:
            import _MYCFR
            return _MYCFR
        try:
            _mod = imp.load_module('_MYCFR', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MYCFR = swig_import_helper()
    del swig_import_helper
else:
    import _MYCFR
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

POWER_RANGE = _MYCFR.POWER_RANGE
MAX_POWER = _MYCFR.MAX_POWER
MC_ITER = _MYCFR.MC_ITER
SPADE = _MYCFR.SPADE
DIAMOND = _MYCFR.DIAMOND
CLUB = _MYCFR.CLUB
HEART = _MYCFR.HEART
Highcard = _MYCFR.Highcard
Pair = _MYCFR.Pair
TowPairs = _MYCFR.TowPairs
ThreeSame = _MYCFR.ThreeSame
Straight = _MYCFR.Straight
Flush = _MYCFR.Flush
FullHouse = _MYCFR.FullHouse
FourSame = _MYCFR.FourSame
SFlush = _MYCFR.SFlush
class Card_power(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Card_power, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Card_power, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _MYCFR.Card_power_type_set
    __swig_getmethods__["type"] = _MYCFR.Card_power_type_get
    if _newclass:
        type = _swig_property(_MYCFR.Card_power_type_get, _MYCFR.Card_power_type_set)
    __swig_setmethods__["other"] = _MYCFR.Card_power_other_set
    __swig_getmethods__["other"] = _MYCFR.Card_power_other_get
    if _newclass:
        other = _swig_property(_MYCFR.Card_power_other_get, _MYCFR.Card_power_other_set)

    def __init__(self):
        this = _MYCFR.new_Card_power()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MYCFR.delete_Card_power
    __del__ = lambda self: None
Card_power_swigregister = _MYCFR.Card_power_swigregister
Card_power_swigregister(Card_power)

class Calculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calculator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MYCFR.new_Calculator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def gen_rank5_table(self):
        return _MYCFR.Calculator_gen_rank5_table(self)

    def rank5_ranged(self, c1, c2, c3, c4, c5, flush):
        return _MYCFR.Calculator_rank5_ranged(self, c1, c2, c3, c4, c5, flush)

    def gen_cp(self, cp, tp, c1, c2, c3, c4, c5):
        return _MYCFR.Calculator_gen_cp(self, cp, tp, c1, c2, c3, c4, c5)

    def power(self, h0, h1, p0, p1, p2, p3, p4):
        return _MYCFR.Calculator_power(self, h0, h1, p0, p1, p2, p3, p4)

    def potential_power(self, h0, h1, p0, p1, p2, p3, p4, step):
        return _MYCFR.Calculator_potential_power(self, h0, h1, p0, p1, p2, p3, p4, step)

    def prior_win_rate(self, h0, h1, p0, p1, p2, p3, p4, step, MCtimes=10000):
        return _MYCFR.Calculator_prior_win_rate(self, h0, h1, p0, p1, p2, p3, p4, step, MCtimes)
    __swig_destroy__ = _MYCFR.delete_Calculator
    __del__ = lambda self: None
Calculator_swigregister = _MYCFR.Calculator_swigregister
Calculator_swigregister(Calculator)

# This file is compatible with both classic and new-style classes.


